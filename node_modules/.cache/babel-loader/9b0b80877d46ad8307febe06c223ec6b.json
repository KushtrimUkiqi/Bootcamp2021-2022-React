{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\e-shop\\\\app\\\\src\\\\pages\\\\Products\\\\Products.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Products.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Product() {\n  _s();\n\n  //id represents the category of the products to be displayed \n  const {\n    id\n  } = useParams(); //productsSizes represents an array of sizes for a particular category .\n  //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \n\n  const [productsSizes, setProductsSizes] = useState([\"xs\", \"s\", \"m\", \"l\", \"xl\", \"xxl\"]); //productsBrands represents an array of brands for a particular category .\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \n\n  const [productsBrands, setProductsBrands] = useState([\"Illyrian Bloodline\", \"KTM\", \"Zara\", \"Adidas\", \"Nike\", \"Code4Life\"]);\n  let productsColors = [\"White\", \"Purple\", \"Yellow\", \"Green\", \"Brown\", \"Orange\", \"Gray\", \"Blue\", \"Silver\", \"Red\", \"Black\"]; //productsOrder can be : standard , price ascending , price descending .\n  //@by default the value is set to be \"standard\";\n\n  const [productsOrder, setProductsOrder] = useState(\"standard\"); //products number represents the number of the products that need to be displayed , the value can be 20, 30 or 40 .\n  // @By default the value is set to be 20\n\n  const [productsNumber, setProductsNumber] = useState(20); //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\n\n  const [productsPreferredBrand, setProductsPreferredBrand] = useState([]); //Function that sets/unsets the preferred brand/s\n\n  function toggleBrandPreferences(index) {} //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\n\n\n  const [productsPreferredColor, setProductsPreferredColor] = useState([]); //Function that sets/unsets the preferred color/s\n\n  function toggleColorPreferences(index) {} //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\n  //@By default the object has attributes that have values 0 each , in this situation we expect all the products \n\n\n  const [productsPriceRange, setProductsPriceRange] = useState({\n    lowestPrice: 0,\n    highestPrice: 0\n  }); //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\n\n  const [productsPreferedSizes, setProductsPreferedSizes] = useState([]); //Function that sets/unsets the preferred size/s\n\n  function toggleSizePreferences(index) {}\n\n  const [filterTableDisplay, setFilterTableDisplay] = useState(false);\n  const [pbTableDisplay, setPbTableDisplay] = useState(false);\n  const [pcTableDisplay, setPcTableDisplay] = useState(false);\n  const [psTableDisplay, setPsTableDisplay] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"filterTable\",\n      onClick: () => {\n        setFilterTableDisplay(!filterTableDisplay);\n      },\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: filterTableDisplay ? \"filterTable\" : \"none\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filterOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"ppInput\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pbTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pbButton\",\n          onClick: () => {\n            setPbTableDisplay(!pbTableDisplay);\n          },\n          children: \"Preferred brands\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: psTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"psButton\",\n          onClick: () => {\n            setPsTableDisplay(!psTableDisplay);\n          },\n          children: \"Preferred sizes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pcTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pcButton\",\n          onClick: () => {\n            setPcTableDisplay(!pcTableDisplay);\n          },\n          children: \"Preferred colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: pbTableDisplay ? \"productTableDisplay\" : \"none\",\n      children: productsBrands.map((brandInContext, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"preferredBrands\",\n          value: brandInContext,\n          onChange: () => {\n            toggleBrandPreferences(index);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: brandInContext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 201\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 64\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: psTableDisplay ? \"productTableDisplay\" : \"none\",\n      children: productsSizes.map((sizeInContext, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"preferredBrands\",\n          value: sizeInContext,\n          onChange: () => {\n            toggleSizePreferences(index);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 76\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: sizeInContext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 194\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 59\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: pcTableDisplay ? \"productTableDisplay\" : \"none\",\n      children: productsColors.map((colorInContext, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"preferredColors\",\n          value: colorInContext,\n          onChange: () => {\n            toggleColorPreferences(index);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 77\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: colorInContext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 197\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 60\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Product, \"UIV43QdV40XunP+zCLw5LlTWmB8=\", false, function () {\n  return [useParams];\n});\n\n_c = Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Bootcamp/e-shop/app/src/pages/Products/Products.js"],"names":["React","useEffect","useState","useParams","Product","id","productsSizes","setProductsSizes","productsBrands","setProductsBrands","productsColors","productsOrder","setProductsOrder","productsNumber","setProductsNumber","productsPreferredBrand","setProductsPreferredBrand","toggleBrandPreferences","index","productsPreferredColor","setProductsPreferredColor","toggleColorPreferences","productsPriceRange","setProductsPriceRange","lowestPrice","highestPrice","productsPreferedSizes","setProductsPreferedSizes","toggleSizePreferences","filterTableDisplay","setFilterTableDisplay","pbTableDisplay","setPbTableDisplay","pcTableDisplay","setPcTableDisplay","psTableDisplay","setPsTableDisplay","map","brandInContext","sizeInContext","colorInContext"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAO,gBAAP;;;AACA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAE9B;AACA,QAAM;AAACC,IAAAA;AAAD,MAAOF,SAAS,EAAtB,CAH8B,CAK9B;AACA;AACA;;AACA,QAAM,CAACG,aAAD,EAAeC,gBAAf,IAAmCL,QAAQ,CAAC,CAAC,IAAD,EAAM,GAAN,EAAU,GAAV,EAAc,GAAd,EAAkB,IAAlB,EAAuB,KAAvB,CAAD,CAAjD,CAR8B,CAU7B;AACC;;AACF,QAAM,CAACM,cAAD,EAAgBC,iBAAhB,IAAqCP,QAAQ,CAAC,CAAC,oBAAD,EAAsB,KAAtB,EAA4B,MAA5B,EAAmC,QAAnC,EAA4C,MAA5C,EAAmD,WAAnD,CAAD,CAAnD;AAGA,MAAIQ,cAAc,GAAG,CAAC,OAAD,EAAS,QAAT,EAAkB,QAAlB,EAA2B,OAA3B,EAAmC,OAAnC,EAA2C,QAA3C,EAAoD,MAApD,EAA2D,MAA3D,EAAkE,QAAlE,EAA2E,KAA3E,EAAiF,OAAjF,CAArB,CAf8B,CAoB9B;AACA;;AACA,QAAM,CAACC,aAAD,EAAeC,gBAAf,IAAmCV,QAAQ,CAAC,UAAD,CAAjD,CAtB8B,CAwB9B;AACA;;AACA,QAAK,CAACW,cAAD,EAAgBC,iBAAhB,IAAqCZ,QAAQ,CAAC,EAAD,CAAlD,CA1B8B,CA6B1B;AACA;;AACA,QAAK,CAACa,sBAAD,EAAwBC,yBAAxB,IAAqDd,QAAQ,CAAC,EAAD,CAAlE,CA/B0B,CAiCtB;;AACA,WAASe,sBAAT,CAAgCC,KAAhC,EAAsC,CAAE,CAlClB,CAqC1B;AACA;;;AACA,QAAK,CAACC,sBAAD,EAAwBC,yBAAxB,IAAqDlB,QAAQ,CAAC,EAAD,CAAlE,CAvC0B,CAyCtB;;AACA,WAASmB,sBAAT,CAAgCH,KAAhC,EAAsC,CAAE,CA1ClB,CA4C1B;AACA;;;AACA,QAAK,CAACI,kBAAD,EAAoBC,qBAApB,IAA6CrB,QAAQ,CAAC;AAACsB,IAAAA,WAAW,EAAE,CAAd;AAAkBC,IAAAA,YAAY,EAAE;AAAhC,GAAD,CAA1D,CA9C0B,CAiD1B;AACA;;AACA,QAAM,CAACC,qBAAD,EAAuBC,wBAAvB,IAAmDzB,QAAQ,CAAC,EAAD,CAAjE,CAnD0B,CAqDlB;;AACA,WAAS0B,qBAAT,CAA+BV,KAA/B,EAAqC,CAAE;;AAE/C,QAAK,CAACW,kBAAD,EAAoBC,qBAApB,IAA6C5B,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAK,CAAC6B,cAAD,EAAgBC,iBAAhB,IAAqC9B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAK,CAAC+B,cAAD,EAAgBC,iBAAhB,IAAqChC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAK,CAACiC,cAAD,EAAgBC,iBAAhB,IAAqClC,QAAQ,CAAC,KAAD,CAAlD;AAEJ,sBACI;AAAA,4BACI;AAAA,gBAAKG;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAE,MAAM;AAACyB,QAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AAA2C,OAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAM,MAAA,SAAS,EAAEA,kBAAkB,GAAG,aAAH,GAAmB,MAAtD;AAAA,6BAEQ;AAAK,QAAA,EAAE,EAAC,eAAR;AAAA,gCACI;AAAO,UAAA,EAAE,EAAC,SAAV;AAAoB,UAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAGE,cAAc,GAAG,eAAH,GAAqB,GAAvD;AAA4D,UAAA,EAAE,EAAC,UAA/D;AAA0E,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAmC,WAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,SAAS,EAAGI,cAAc,GAAG,eAAH,GAAqB,GAAvD;AAA4D,UAAA,EAAE,EAAC,UAA/D;AAA0E,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAmC,WAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,SAAS,EAAGF,cAAc,GAAG,eAAH,GAAqB,GAAvD;AAA4D,UAAA,EAAE,EAAC,UAA/D;AAA0E,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAmC,WAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,YAJJ,eAeY;AAAK,MAAA,SAAS,EAAEF,cAAc,GAAG,qBAAH,GAA2B,MAAzD;AAAA,gBACKvB,cAAc,CACN6B,GADR,CACY,CAACC,cAAD,EAAgBpB,KAAhB,kBAA0B;AAAA,gCAAiB;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,iBAA5B;AAA8C,UAAA,KAAK,EAAEoB,cAArD;AAAqE,UAAA,QAAQ,EAAE,MAAM;AAACrB,YAAAA,sBAAsB,CAACC,KAAD,CAAtB;AAA8B;AAApH;AAAA;AAAA;AAAA;AAAA,gBAAjB,eAAyI;AAAA,oBAAQoB;AAAR;AAAA;AAAA;AAAA;AAAA,gBAAzI;AAAA,SAAUpB,KAAV;AAAA;AAAA;AAAA;AAAA,cADtC;AADL;AAAA;AAAA;AAAA;AAAA,YAfZ,eAsBY;AAAK,MAAA,SAAS,EAAEiB,cAAc,GAAG,qBAAH,GAA2B,MAAzD;AAAA,gBACK7B,aAAa,CACT+B,GADJ,CACQ,CAACE,aAAD,EAAerB,KAAf,kBAAyB;AAAA,gCAAiB;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,iBAA5B;AAA8C,UAAA,KAAK,EAAEqB,aAArD;AAAqE,UAAA,QAAQ,EAAE,MAAM;AAACX,YAAAA,qBAAqB,CAACV,KAAD,CAArB;AAA6B;AAAnH;AAAA;AAAA;AAAA;AAAA,gBAAjB,eAAuI;AAAA,oBAAQqB;AAAR;AAAA;AAAA;AAAA;AAAA,gBAAvI;AAAA,SAAUrB,KAAV;AAAA;AAAA;AAAA;AAAA,cADjC;AADL;AAAA;AAAA;AAAA;AAAA,YAtBZ,eA4BY;AAAK,MAAA,SAAS,EAAEe,cAAc,GAAG,qBAAH,GAA2B,MAAzD;AAAA,gBACKvB,cAAc,CACV2B,GADJ,CACQ,CAACG,cAAD,EAAgBtB,KAAhB,kBAA0B;AAAA,gCAAiB;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,iBAA5B;AAA8C,UAAA,KAAK,EAAEsB,cAArD;AAAsE,UAAA,QAAQ,EAAE,MAAM;AAACnB,YAAAA,sBAAsB,CAACH,KAAD,CAAtB;AAA8B;AAArH;AAAA;AAAA;AAAA;AAAA,gBAAjB,eAAyI;AAAA,oBAAQsB;AAAR;AAAA;AAAA;AAAA;AAAA,gBAAzI;AAAA,SAAUtB,KAAV;AAAA;AAAA;AAAA;AAAA,cADlC;AADL;AAAA;AAAA;AAAA;AAAA,YA5BZ;AAAA,kBADJ;AAoCH;;GAjGuBd,O;UAGPD,S;;;KAHOC,O","sourcesContent":["import React from 'react';\r\nimport {useEffect,useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport \"./Products.css\";\r\nexport default function Product() {\r\n    \r\n    //id represents the category of the products to be displayed \r\n    const {id} = useParams();\r\n\r\n    //productsSizes represents an array of sizes for a particular category .\r\n    //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\r\n    //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \r\n    const [productsSizes,setProductsSizes] = useState([\"xs\",\"s\",\"m\",\"l\",\"xl\",\"xxl\"]);\r\n\r\n     //productsBrands represents an array of brands for a particular category .\r\n      //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \r\n    const [productsBrands,setProductsBrands] = useState([\"Illyrian Bloodline\",\"KTM\",\"Zara\",\"Adidas\",\"Nike\",\"Code4Life\"]);\r\n\r\n\r\n    let productsColors = [\"White\",\"Purple\",\"Yellow\",\"Green\",\"Brown\",\"Orange\",\"Gray\",\"Blue\",\"Silver\",\"Red\",\"Black\"];\r\n\r\n\r\n\r\n\r\n    //productsOrder can be : standard , price ascending , price descending .\r\n    //@by default the value is set to be \"standard\";\r\n    const [productsOrder,setProductsOrder] = useState(\"standard\");\r\n\r\n    //products number represents the number of the products that need to be displayed , the value can be 20, 30 or 40 .\r\n    // @By default the value is set to be 20\r\n    const[productsNumber,setProductsNumber] = useState(20);\r\n\r\n    \r\n        //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\r\n        const[productsPreferredBrand,setProductsPreferredBrand] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred brand/s\r\n            function toggleBrandPreferences(index){}\r\n\r\n\r\n        //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\r\n        const[productsPreferredColor,setProductsPreferredColor] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred color/s\r\n            function toggleColorPreferences(index){}\r\n\r\n        //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\r\n        //@By default the object has attributes that have values 0 each , in this situation we expect all the products \r\n        const[productsPriceRange,setProductsPriceRange] = useState({lowestPrice: 0 , highestPrice: 0});\r\n    \r\n            \r\n        //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\r\n        const [productsPreferedSizes,setProductsPreferedSizes] = useState([]);\r\n\r\n                //Function that sets/unsets the preferred size/s\r\n                function toggleSizePreferences(index){}\r\n\r\n        const[filterTableDisplay,setFilterTableDisplay] = useState(false);\r\n        const[pbTableDisplay,setPbTableDisplay] = useState(false);\r\n        const[pcTableDisplay,setPcTableDisplay] = useState(false);\r\n        const[psTableDisplay,setPsTableDisplay] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <h1>{id}</h1>\r\n            <br/>\r\n            <button id='filterTable' onClick={() => {setFilterTableDisplay(!filterTableDisplay)}}>Filter</button>\r\n            <div  className={filterTableDisplay ? \"filterTable\" : \"none\"}>\r\n\r\n                    <div id='filterOptions' >\r\n                        <input id=\"ppInput\" type=\"range\"/>\r\n                        <button className={ pbTableDisplay ? \"clickedButton\" : \"s\"} id=\"pbButton\" onClick={() => {setPbTableDisplay(!pbTableDisplay)} }>Preferred brands</button>\r\n                        <button className={ psTableDisplay ? \"clickedButton\" : \"s\"} id=\"psButton\" onClick={() => {setPsTableDisplay(!psTableDisplay)} }>Preferred sizes</button>\r\n                        <button className={ pcTableDisplay ? \"clickedButton\" : \"s\"} id=\"pcButton\" onClick={() => {setPcTableDisplay(!pcTableDisplay)} }>Preferred colors</button>\r\n                    </div>\r\n            </div>\r\n\r\n\r\n                    <div className={pbTableDisplay ? \"productTableDisplay\" : \"none\" }>\r\n                        {productsBrands\r\n                                .map((brandInContext,index) => <div key={index}><input type=\"checkbox\" name=\"preferredBrands\" value={brandInContext} onChange={() => {toggleBrandPreferences(index)}} /><label>{brandInContext}</label></div>)\r\n                            }\r\n                    </div>\r\n                \r\n                \r\n                    <div className={psTableDisplay ? \"productTableDisplay\" : \"none\" }>\r\n                        {productsSizes\r\n                            .map((sizeInContext,index) => <div key={index}><input type=\"checkbox\" name=\"preferredBrands\" value={sizeInContext}  onChange={() => {toggleSizePreferences(index)}}/><label>{sizeInContext}</label></div>)\r\n                        }\r\n                    </div>\r\n               \r\n                    <div className={pcTableDisplay ? \"productTableDisplay\" : \"none\" }>\r\n                        {productsColors\r\n                            .map((colorInContext,index) => <div key={index}><input type=\"checkbox\" name=\"preferredColors\" value={colorInContext}  onChange={() => {toggleColorPreferences(index)}}/><label>{colorInContext}</label></div>)\r\n                        }\r\n                    </div>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}