{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\e-shop\\\\app\\\\src\\\\pages\\\\Products\\\\Products.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Products.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Product() {\n  _s();\n\n  //id represents the category of the products to be displayed \n  const {\n    id\n  } = useParams(); //productsSizes represents an array of sizes for a particular category .\n  //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \n\n  const [productsSizes, setProductsSizes] = useState([\"xs\", \"s\", \"m\", \"l\", \"xl\", \"xxl\"]); //productsBrands represents an array of sizes for a particular category .\n\n  const [productsBrands, setProductsBrands] = useState([\"Illyrian Bloodline\", \"KTM\", \"Zara\", \"Adidas\", \"Nike\", \"Code4Life\"]); //productsOrder can be : standard , price ascending , price descending .\n  //@by default the value is set to be \"standard\";\n\n  const [productsOrder, setProductsOrder] = useState(\"standard\"); //products number represents the number of the products that need to be displayed , the value can be 20, 30 or 40 .\n  // @By default the value is set to be 20\n\n  const [productsNumber, setProductsNumber] = useState(20); //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\n\n  const [productsPreferredBrand, setProductsPreferredBrand] = useState([]); //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\n\n  const [productsPreferredColor, setProductsPreferredColor] = useState([]); //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\n  //@By default the object has attributes that have values 0 each , in this situation we expect all the products \n\n  const [productsPriceRange, setProductsPriceRange] = useState({\n    lowestPrice: 0,\n    highestPrice: 0\n  }); //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\n\n  const [productsPreferedSizes, setProductsPreferedSizes] = useState([]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"ppInput\",\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"pbButton\",\n        onClick: () => {},\n        children: \"Preferred brands\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"psButton\",\n        onClick: () => {},\n        children: \"Preferred sizes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: productsSizes.map((sizeInContext, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: sizeInContext\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 76\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"preferredSizes\",\n            value: sizeInContext\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 106\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 59\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"pcButton\",\n        onClick: () => {},\n        children: \"Preferred colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Product, \"GQaHKf8cBqQJqc0dKBCKOvytr3k=\", false, function () {\n  return [useParams];\n});\n\n_c = Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Bootcamp/e-shop/app/src/pages/Products/Products.js"],"names":["React","useEffect","useState","useParams","Product","id","productsSizes","setProductsSizes","productsBrands","setProductsBrands","productsOrder","setProductsOrder","productsNumber","setProductsNumber","productsPreferredBrand","setProductsPreferredBrand","productsPreferredColor","setProductsPreferredColor","productsPriceRange","setProductsPriceRange","lowestPrice","highestPrice","productsPreferedSizes","setProductsPreferedSizes","map","sizeInContext","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect,useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport \"./Products.css\";\r\nexport default function Product() {\r\n    \r\n    //id represents the category of the products to be displayed \r\n    const {id} = useParams();\r\n\r\n    //productsSizes represents an array of sizes for a particular category .\r\n    //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\r\n    //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \r\n    const [productsSizes,setProductsSizes] = useState([\"xs\",\"s\",\"m\",\"l\",\"xl\",\"xxl\"]);\r\n\r\n     //productsBrands represents an array of sizes for a particular category .\r\n    const [productsBrands,setProductsBrands] = useState([\"Illyrian Bloodline\",\"KTM\",\"Zara\",\"Adidas\",\"Nike\",\"Code4Life\"]);\r\n\r\n\r\n    //productsOrder can be : standard , price ascending , price descending .\r\n    //@by default the value is set to be \"standard\";\r\n    const [productsOrder,setProductsOrder] = useState(\"standard\");\r\n\r\n    //products number represents the number of the products that need to be displayed , the value can be 20, 30 or 40 .\r\n    // @By default the value is set to be 20\r\n    const[productsNumber,setProductsNumber] = useState(20);\r\n\r\n    //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\r\n    const[productsPreferredBrand,setProductsPreferredBrand] = useState([]);\r\n\r\n    //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\r\n    const[productsPreferredColor,setProductsPreferredColor] = useState([]);\r\n\r\n    //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\r\n    //@By default the object has attributes that have values 0 each , in this situation we expect all the products \r\n    const[productsPriceRange,setProductsPriceRange] = useState({lowestPrice: 0 , highestPrice: 0});\r\n    \r\n    //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\r\n    const [productsPreferedSizes,setProductsPreferedSizes] = useState([]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>{id}</h1>\r\n            <br/>\r\n            <button>Filter</button>\r\n            <div id=\"filter\">\r\n\r\n                <input id=\"ppInput\" type=\"range\"/>\r\n\r\n                <button id=\"pbButton\" onClick={() => {} }>Preferred brands</button>\r\n                    <div>\r\n                        {}\r\n                    </div>\r\n                <button id=\"psButton\" onClick={() => {} }>Preferred sizes</button>\r\n                    <div>\r\n                        {productsSizes\r\n                            .map((sizeInContext,index) => <div key={index}><label>{sizeInContext}</label><input type=\"checkbox\" name=\"preferredSizes\" value={sizeInContext} /></div>)\r\n                        }\r\n                    </div>\r\n                <button id=\"pcButton\" onClick={() => {} }>Preferred colors</button>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}