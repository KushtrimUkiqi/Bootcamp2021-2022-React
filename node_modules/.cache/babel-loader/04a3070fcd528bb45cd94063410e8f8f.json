{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\reactWeatherApp_Local\\\\app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Container from './components/Container/Container';\nimport Input from './components/Input/Input';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst weatherApi = {\n  url: `https://api.weatherapi.com/v1/forecast.json`,\n  key: `9c1199b65355418b8fb150557211312`,\n  createUrl: function (city, days) {\n    return `${this.url}?key=${this.key}&q=${city}&days=${days}`;\n  }\n};\n\nfunction forecast(temp_celcius, tmep_fahrenheit, icon, weather_description) {\n  //represents the temperature in celcius (example: 4.0)\n  this.temp_celcius = temp_celcius; // string\n  //represents the temperature in fahrenheit (example: 39.2)\n\n  this.tmep_fahrenheit = tmep_fahrenheit; // string\n  //represents the icon (example: //cdn.weatherapi.com/weather/64x64/night/122.png)\n\n  this.icon = icon; //string\n  //represents the weather description (example: Overcast)\n\n  this.weather_description = weather_description; //string\n}\n\nfunction daySummary(maxtemp_c, maxtemp_f, mintemp_c, mintemp_f, avgtemp_c, avgtemp_f, icon, description) {\n  this.maxtemp_c = maxtemp_c;\n  this.maxtemp_f = maxtemp_f;\n  this.mintemp_c = mintemp_c;\n  this.mintemp_f = mintemp_f;\n  this.avgtemp_c = avgtemp_c;\n  this.avgtemp_f = avgtemp_f;\n  this.icon = icon;\n  this.description = description;\n}\n\nfunction forecastDay(date, day_summary, day) {\n  //represents the date (example: 2021.12.14)\n  this.date = date; //string\n  //represents the summary of the day  , an object with attributes : maxtemp_c,maxtemp_f,mintemp_c,mintemp_f,avgtemp_c,avgtemp_f,icon,description\n\n  this.day_summary = day_summary; //represents the an array of the weather on each hour , an array of 24 objects(forecast object is used) with attributes : temp_celcius , tmep_fahrenheit ,icon , weather_description (example: 4.0,39.2,//cdn.weatherapi.com/weather/64x64/night/122.png,Overcast)  \n\n  this.day = day; //forecast objects\n}\n\nfunction weatherData(location, localtime, currentWeather, forecastDays) {\n  //represents the location (example: Skopje/Macedonia ,Kumanovo/Macedonia , Tetovo/Macedonia)\n  this.location = location; // string\n  //represents the local date and time the request was made (example: 2021-12-14 22:09)\n\n  this.localtime = localtime; //string\n  //represents the current weather , an object(forecast object is used) with attributes : temp_celcius , tmep_fahrenheit ,icon , weather_description (example: 4.0,39.2,//cdn.weatherapi.com/weather/64x64/night/122.png,Overcast)  \n\n  this.currentWeather = currentWeather; // forecast\n  //represents an array of objects(forecastDay is used)  with attributes : date , an array of 24 objects called *days* (forecast object is used) with attributes : temp_celcius,temp_fahrenheit,time,icon,weather_description \n\n  this.forecastDays = forecastDays; // forecastDay object\n}\n\nfunction generateWeatherDataFromApi(data) {\n  let location = `${data.location.name},${data.location.country}`;\n  let localtime = data.location.localtime;\n  let currentWeather = new forecast(data.current.temp_c, data.current.temp_f, data.current.condition.icon, data.current.condition.text);\n  let days = generateWeatherDay(data.forecast.forecastday);\n  return new weatherData(location, localtime, currentWeather, [...days]);\n}\n\nfunction generateWeatherDay(days) {\n  return days.map(day => {\n    let date = day.date;\n    let day_summary = new daySummary(day.day.maxtemp_c, day.day.maxtemp_f, day.day.mintemp_c, day.day.mintemp_f);\n    let hours = day.hour.map(hour => new forecast(hour.temp_c, hour.temp_f, hour.condition.icon, hour.condition.text));\n    return new forecastDay(date, day_summary, [...hours]);\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [city, setCity] = useState(\"Skopje\");\n  const [days, setDays] = useState(1);\n  const [location, setLocation] = useState({\n    lat: '',\n    long: ''\n  });\n  const [weather, setWeather] = useState(new weatherData('skopje', `${new Date().toLocaleString(undefined, {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    hour12: false,\n    minute: '2-digit',\n    second: '2-digit'\n  })}`, new forecast('no temp', 'no temp', '', ''), [new forecastDay('date', new daySummary('0', '0', '0', '0', '0', '0', '', ''), '')]));\n\n  function search() {\n    let c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : location.lat + \",\" + location.long;\n    let days_from_input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    setCity(c);\n    setDays(days_from_input);\n    axios.get(weatherApi.createUrl(c, days_from_input)).then(resp => {\n      setWeather(generateWeatherDataFromApi(resp.data));\n      console.log(weather.forecastDays);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      window.alert(\"Your browser does not support geolocation\");\n    }\n  }\n\n  function showPosition(position) {\n    setCity(position.coords.latitude + \",\" + position.coords.longitude);\n    setLocation({\n      lat: position.coords.latitude,\n      long: position.coords.longitude\n    });\n  }\n\n  useEffect(() => {}); // getLocation();\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"main\",\n      list: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ctPeR7SEHzZH4NDzwdguzc2WbvA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Bootcamp/reactWeatherApp_Local/app/src/App.js"],"names":["Container","Input","useState","useEffect","axios","weatherApi","url","key","createUrl","city","days","forecast","temp_celcius","tmep_fahrenheit","icon","weather_description","daySummary","maxtemp_c","maxtemp_f","mintemp_c","mintemp_f","avgtemp_c","avgtemp_f","description","forecastDay","date","day_summary","day","weatherData","location","localtime","currentWeather","forecastDays","generateWeatherDataFromApi","data","name","country","current","temp_c","temp_f","condition","text","generateWeatherDay","forecastday","map","hours","hour","App","setCity","setDays","setLocation","lat","long","weather","setWeather","Date","toLocaleString","undefined","year","month","hour12","minute","second","search","c","days_from_input","get","then","resp","console","log","catch","error","getLocation","navigator","geolocation","getCurrentPosition","showPosition","window","alert","position","coords","latitude","longitude"],"mappings":"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","sourcesContent":["import './App.css';\nimport Container from './components/Container/Container';\nimport Input from './components/Input/Input';\n\nimport { useState ,useEffect} from 'react';\nimport axios from 'axios';\n\n\nconst weatherApi = {\n\n  url: `https://api.weatherapi.com/v1/forecast.json`,\n  key: `9c1199b65355418b8fb150557211312`,\n  createUrl : function  (city,days) \n  {return `${this.url}?key=${this.key}&q=${city}&days=${days}`;}\n}\n\nfunction forecast(temp_celcius , tmep_fahrenheit ,icon , weather_description)\n{\n  //represents the temperature in celcius (example: 4.0)\n  this.temp_celcius = temp_celcius; // string\n  //represents the temperature in fahrenheit (example: 39.2)\n  this.tmep_fahrenheit = tmep_fahrenheit; // string\n  //represents the icon (example: //cdn.weatherapi.com/weather/64x64/night/122.png)\n  this.icon = icon; //string\n  //represents the weather description (example: Overcast)\n  this.weather_description = weather_description; //string\n}\n\nfunction daySummary(maxtemp_c,maxtemp_f,mintemp_c,mintemp_f,avgtemp_c,avgtemp_f,icon,description)\n{\n  this.maxtemp_c = maxtemp_c;\n  this.maxtemp_f = maxtemp_f;\n  this.mintemp_c = mintemp_c;\n  this.mintemp_f = mintemp_f;\n  this.avgtemp_c = avgtemp_c;\n  this.avgtemp_f = avgtemp_f\n  this.icon = icon;\n  this.description = description;\n}\n\nfunction forecastDay(date,day_summary,day)\n{\n  //represents the date (example: 2021.12.14)\n  this.date = date; //string\n  //represents the summary of the day  , an object with attributes : maxtemp_c,maxtemp_f,mintemp_c,mintemp_f,avgtemp_c,avgtemp_f,icon,description\n  this.day_summary = day_summary;\n  //represents the an array of the weather on each hour , an array of 24 objects(forecast object is used) with attributes : temp_celcius , tmep_fahrenheit ,icon , weather_description (example: 4.0,39.2,//cdn.weatherapi.com/weather/64x64/night/122.png,Overcast)  \n  this.day = day; //forecast objects\n}\n\nfunction weatherData (location,localtime,currentWeather,forecastDays)\n{\n  //represents the location (example: Skopje/Macedonia ,Kumanovo/Macedonia , Tetovo/Macedonia)\n  this.location = location; // string\n  //represents the local date and time the request was made (example: 2021-12-14 22:09)\n  this.localtime = localtime; //string\n  //represents the current weather , an object(forecast object is used) with attributes : temp_celcius , tmep_fahrenheit ,icon , weather_description (example: 4.0,39.2,//cdn.weatherapi.com/weather/64x64/night/122.png,Overcast)  \n  this.currentWeather = currentWeather; // forecast\n  //represents an array of objects(forecastDay is used)  with attributes : date , an array of 24 objects called *days* (forecast object is used) with attributes : temp_celcius,temp_fahrenheit,time,icon,weather_description \n  this.forecastDays = forecastDays; // forecastDay object\n}\n\nfunction generateWeatherDataFromApi(data)\n{\n  let location = `${data.location.name},${data.location.country}`;\n  let localtime = data.location.localtime;\n  let currentWeather = new forecast(data.current.temp_c,data.current.temp_f,data.current.condition.icon,data.current.condition.text);\n  let days = generateWeatherDay(data.forecast.forecastday);\n\n  return new weatherData(location,localtime,currentWeather,[...days]);\n  \n}\n\nfunction generateWeatherDay(days)\n{\n   return days.map\n   (day =>\n    {\n      let date = day.date;\n      let day_summary = new daySummary(day.day.maxtemp_c,day.day.maxtemp_f,day.day.mintemp_c,day.day.mintemp_f)\n      let hours = day.hour.map\n      (hour => new forecast (hour.temp_c,hour.temp_f,hour.condition.icon,hour.condition.text))\n      return new forecastDay(date,day_summary,[...hours]);\n    })\n}\n\n\n\n\nfunction App() {\n\n  const [city,setCity] = useState(\"Skopje\");\n  const [days,setDays] = useState(1); \n  const [location,setLocation] = useState({lat: '' , long: ''});\n  const [weather,setWeather] = useState\n  (\n    new weatherData\n      (\n        'skopje',\n        `${new Date().toLocaleString(undefined, {year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', hour12: false, minute:'2-digit', second:'2-digit'})}`,\n        new forecast('no temp','no temp','',''),\n        [new forecastDay('date',new daySummary('0','0','0','0','0','0','',''),'')]\n      )\n    \n  );\n\n\n\n  function search(c = (location.lat+\",\"+location.long),days_from_input=1)\n  {\n    setCity(c);\n    setDays(days_from_input);\n    axios.get(weatherApi.createUrl(c,days_from_input)).then(\n      resp => {setWeather(generateWeatherDataFromApi(resp.data)); console.log(weather.forecastDays);}\n    ).catch(error => {\n      console.log(error)\n    });\n  }\n\n  \nfunction getLocation() \n{\n  if (navigator.geolocation) \n  {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } \n  \n  else \n  {\n    window.alert(\"Your browser does not support geolocation\");\n  }\n}\n\n\nfunction showPosition(position) \n{\n  setCity(position.coords.latitude+\",\"+position.coords.longitude);\n  setLocation({lat: position.coords.latitude , long: position.coords.longitude});\n}\n\nuseEffect(()=>\n{\n  \n}  \n);\n\n// getLocation();\n  return (\n    <section className=\"App\">\n      <Input search={search}></Input>\n      <Container className=\"main\" list={weather}>\n      </Container>\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}