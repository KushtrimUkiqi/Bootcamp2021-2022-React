{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\e-shop\\\\app\\\\src\\\\pages\\\\Products\\\\Products.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Products.css\";\nimport ItemList from '../../components/ItemList/ItemList';\nimport Select from '../../components/Select/Select';\nimport CheckBox from '../../components/CheckBox/CheckBox';\nimport InputSlider from '../../components/InputSlider/InputSlider';\nimport MasterState from '../../classes/MasterStateObject';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Product() {\n  _s();\n\n  //id represents the category of the products to be displayed \n  const {\n    id\n  } = useParams(); ///states that are dependent on and are changed by the api -> @apiSTATE\n  //@apiSTATE\n  //productsSizes represents an array of sizes for a particular category .\n  //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \n\n  const [productsSizes, setProductsSizes] = useState([]); //@apiSTATE\n  //productsPrices represents an object whith the lowest and highest price for a particular category of products .\n  //By default the object is set to have two attributes lowestPrice and highestPrice , both having the value 0. During the first fetch of the api call we expect the value of the attributes to change. \n\n  const [productsPrices, setProductsPrices] = useState({\n    lowestPrice: 0,\n    highestPrice: 0\n  }); //@apiSTATE\n  //productsBrands represents an array of brands for a particular category .\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \n\n  const [productsBrands, setProductsBrands] = useState([]); //hard coded value for colors !!!might be changed in the future\n\n  let productsColors = [\"White\", \"Purple\", \"Yellow\", \"Green\", \"Brown\", \"Orange\", \"Gray\", \"Blue\", \"Silver\", \"Red\", \"Black\"]; ///states that change as a result of interaction with the user  -> @userChangeableSTATE\n  //@userChangeableSTATE\n  //productsOrder can be : standard , price ascending , price descending .\n  //@By default the value is set to be \"standard\";\n\n  const [productsOrder, setProductsOrder] = useState(\"standard\"); //hard coded value for colors !!!might be changed in the future\n\n  const productsOrderOptions = [{\n    value: \"standard\",\n    text: \"Standard\"\n  }, {\n    value: \"price_ascending\",\n    text: \"Price ascending\"\n  }, {\n    value: \"price_descending\",\n    text: \"Price descending\"\n  }];\n\n  const changeProductsOrder = val => setProductsOrder(val); //@userChangeableSTATE\n  //products number represents the number of the products that need to be displayed , the value can be 20, 40 or 80 .\n  // @By default the value is set to be 20\n\n\n  const [productsNumber, setProductsNumber] = useState(20); //hard coded value for colors !!!might be changed in the future\n\n  const productsNumberOptions = [{\n    value: 20,\n    text: \"20\"\n  }, {\n    value: 40,\n    text: \"40\"\n  }, {\n    value: 80,\n    text: \"80\"\n  }];\n\n  const changeProductsNumber = val => setProductsNumber(val); //function that toggles the value of the checkboxes on their respective states: //@userChangeableSTATE (productsPreferredBrand,productsPreferredColor,productsPreferedSizes)\n\n\n  function toggleCheckBoxPreferences(index, nativeArray, stateArray) {\n    let element = nativeArray[index];\n    let indexOfElement = stateArray.indexOf(element);\n    console.log(indexOfElement);\n    indexOfElement === -1 ? stateArray.push(element) : stateArray.splice(indexOfElement, 1);\n  } //@userChangeableSTATE\n  //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\n\n\n  const [productsPreferredBrand, setProductsPreferredBrand] = useState([]); //Function that sets/unsets the preferred brand/s\n\n  const toggleBrandPreferences = index => toggleCheckBoxPreferences(index, productsBrands, productsPreferredBrand); //@userChangeableSTATE\n  //productsPreferredColor represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\n\n\n  const [productsPreferredColor, setProductsPreferredColor] = useState([]); //Function that sets/unsets the preferred color/s\n\n  const toggleColorPreferences = index => toggleCheckBoxPreferences(index, productsColors, productsPreferredColor); //@userChangeableSTATE\n  //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\n  //@By default the object has attributes that have values 0 each , in this situation we expect all the products \n\n\n  const [productsPriceRange, setProductsPriceRange] = useState({\n    lowestPrice: productsPrices.lowestPrice,\n    highestPrice: productsPrices.highestPrice\n  }); //@userChangeableSTATE   \n  //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\n\n  const [productsPreferedSizes, setProductsPreferedSizes] = useState([]); //Function that sets/unsets the preferred size/s\n\n  const toggleSizePreferences = index => toggleCheckBoxPreferences(index, productsSizes, productsPreferedSizes);\n\n  const [filterTableDisplay, setFilterTableDisplay] = useState(false); //Function that closes all the options for filtering the products\n\n  function setAllFilterButtonsToFalse() {\n    setPbTableDisplay(false);\n    setPsTableDisplay(false);\n    setPcTableDisplay(false);\n  }\n\n  const [pbTableDisplay, setPbTableDisplay] = useState(false);\n  const [pcTableDisplay, setPcTableDisplay] = useState(false);\n  const [psTableDisplay, setPsTableDisplay] = useState(false); //State that is an object that in itself contains the all the @userChangeableSTATE except : productsOrder.\n\n  const [masterState, setMasterState] = useState(masterStateGenerate()); //function that generates an object i.e MasterState object\n\n  function masterStateGenerate() {\n    return new MasterState(productsPriceRange, productsNumber, productsPreferredBrand, productsPreferredColor, productsPreferedSizes);\n  }\n\n  ; //function that updates the masterState\n\n  const masterStateUpdate = () => setMasterState(masterStateGenerate());\n\n  const [getItems, setGetItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  function generateURL() {\n    const url = `http://127.0.0.1:8080/get/product/category`;\n    const query = `?categoryId=${id}&itemsNumber=${productsNumber}&lowestPrice=${productsPriceRange.lowestPrice}&highestPrice=${productsPriceRange.highestPrice}&colors=${productsPreferredColor}&brands=${productsPreferredBrand}&sizes=${productsPreferedSizes}`;\n    return url + query;\n  }\n\n  async function fetchProducts() {\n    const url = generateURL();\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setGetItems(data);\n    setLoading(false);\n  }\n\n  async function fetchPrice() {\n    const url = `http://127.0.0.1:8080/get/category/prices?categoryId=${id}`;\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setProductsPrices(data);\n  }\n\n  async function fetchBrands() {\n    const url = `http://127.0.0.1:8080/get/category/brands?categoryId=${id}`;\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setProductsBrands(data);\n  }\n\n  async function fetchSizes() {\n    const url = `http://127.0.0.1:8080/get/category/sizes?categoryId=${id}`;\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setProductsSizes(data);\n  }\n\n  useEffect(() => {\n    fetchPrice();\n    fetchBrands();\n    fetchSizes();\n  }, []);\n  useEffect(() => {\n    fetchProducts();\n  }, [masterState]);\n  useEffect(() => {\n    reorderProducts();\n  }, [productsOrder]);\n\n  function reorderProducts() {\n    let arr = getItems;\n\n    if (productsOrder === \"price_ascending\") {\n      window.alert(\"ban1\");\n\n      for (var i = 0; i < arr.length; i++) {\n        // Last i elements are already in place  \n        for (var j = 0; j < arr.length - i - 1; j++) {\n          // Checking if the item at present iteration \n          // is greater than the next iteration\n          if (arr[j] > arr[j + 1]) {\n            // If the condition is true then swap them\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n          }\n        }\n      }\n    } else if (productsOrder === \"price_descending\") {\n      for (var i = 0; i < arr.length; i++) {\n        // Last i elements are already in place  \n        for (var j = 0; j < arr.length - i - 1; j++) {\n          // Checking if the item at present iteration \n          // is greater than the next iteration\n          if (arr[j] < arr[j + 1]) {\n            // If the condition is true then swap them\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n          }\n        }\n      }\n    }\n\n    setGetItems(arr);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"productBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"firstElement\",\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        labelText: \"Order by\",\n        onChangeFunction: e => changeProductsOrder(e.target.value),\n        name: \"sort\",\n        options: productsOrderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelText: \"Display\",\n        onChangeFunction: e => changeProductsNumber(e.target.value),\n        name: \"display\",\n        options: productsNumberOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"filterTable\",\n      className: filterTableDisplay ? \"clickedButton\" : \"\",\n      onClick: () => {\n        setFilterTableDisplay(!filterTableDisplay);\n        if (filterTableDisplay) setAllFilterButtonsToFalse();\n      },\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"secondElement\",\n      className: filterTableDisplay ? \"filterTable\" : \"filterTableNone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filterOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"finishFilter\",\n          onClick: masterStateUpdate,\n          children: \"done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(InputSlider, {\n          productsPriceRange: productsPriceRange,\n          ranges: productsPrices,\n          step: 5,\n          setPreferredLowestPrice: number => {\n            setProductsPriceRange({\n              lowestPrice: number,\n              highestPrice: productsPriceRange.highestPrice\n            });\n          },\n          setPreferredHighestPrice: number => {\n            setProductsPriceRange({\n              lowestPrice: productsPriceRange.lowestPrice,\n              highestPrice: 999 - number\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pbTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pbButton\",\n          onClick: () => {\n            setPbTableDisplay(!pbTableDisplay);\n          },\n          children: \"Preferred brands\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: psTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"psButton\",\n          onClick: () => {\n            setPsTableDisplay(!psTableDisplay);\n          },\n          children: \"Preferred sizes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pcTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pcButton\",\n          onClick: () => {\n            setPcTableDisplay(!pcTableDisplay);\n          },\n          children: \"Preferred colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"thirdElement\",\n      children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: pbTableDisplay,\n        productsX: productsBrands,\n        nameCheckBox: \"preferredBrands\",\n        onChangeCheckBox: index => toggleBrandPreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: psTableDisplay,\n        productsX: productsSizes,\n        nameCheckBox: \"preferredSizes\",\n        onChangeCheckBox: index => toggleSizePreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: pcTableDisplay,\n        productsX: productsColors,\n        nameCheckBox: \"preferredColors\",\n        onChangeCheckBox: index => toggleColorPreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fourthElement\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 30\n      }, this), loading !== true && /*#__PURE__*/_jsxDEV(ItemList, {\n        items: getItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Product, \"iONcOAuUEJrkV0RJf2jZf/vTLxY=\", false, function () {\n  return [useParams];\n});\n\n_c = Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Bootcamp/e-shop/app/src/pages/Products/Products.js"],"names":["React","useEffect","useState","useParams","ItemList","Select","CheckBox","InputSlider","MasterState","Product","id","productsSizes","setProductsSizes","productsPrices","setProductsPrices","lowestPrice","highestPrice","productsBrands","setProductsBrands","productsColors","productsOrder","setProductsOrder","productsOrderOptions","value","text","changeProductsOrder","val","productsNumber","setProductsNumber","productsNumberOptions","changeProductsNumber","toggleCheckBoxPreferences","index","nativeArray","stateArray","element","indexOfElement","indexOf","console","log","push","splice","productsPreferredBrand","setProductsPreferredBrand","toggleBrandPreferences","productsPreferredColor","setProductsPreferredColor","toggleColorPreferences","productsPriceRange","setProductsPriceRange","productsPreferedSizes","setProductsPreferedSizes","toggleSizePreferences","filterTableDisplay","setFilterTableDisplay","setAllFilterButtonsToFalse","setPbTableDisplay","setPsTableDisplay","setPcTableDisplay","pbTableDisplay","pcTableDisplay","psTableDisplay","masterState","setMasterState","masterStateGenerate","masterStateUpdate","getItems","setGetItems","loading","setLoading","generateURL","url","query","fetchProducts","resp","fetch","data","json","fetchPrice","fetchBrands","fetchSizes","reorderProducts","arr","window","alert","i","length","j","temp","e","target","number"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect,useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport \"./Products.css\";\r\nimport ItemList from '../../components/ItemList/ItemList';\r\nimport Select from '../../components/Select/Select';\r\nimport CheckBox from '../../components/CheckBox/CheckBox';\r\nimport InputSlider from '../../components/InputSlider/InputSlider';\r\nimport MasterState from '../../classes/MasterStateObject';\r\n\r\n\r\nexport default function Product() {\r\n    \r\n    //id represents the category of the products to be displayed \r\n    const {id} = useParams();\r\n\r\n\r\n\r\n///states that are dependent on and are changed by the api -> @apiSTATE\r\n\r\n    //@apiSTATE\r\n    //productsSizes represents an array of sizes for a particular category .\r\n    //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\r\n    //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \r\n    const [productsSizes,setProductsSizes] = useState([]);\r\n\r\n    //@apiSTATE\r\n    //productsPrices represents an object whith the lowest and highest price for a particular category of products .\r\n    //By default the object is set to have two attributes lowestPrice and highestPrice , both having the value 0. During the first fetch of the api call we expect the value of the attributes to change. \r\n    const [productsPrices,setProductsPrices] = useState({lowestPrice: 0 , highestPrice: 0});\r\n\r\n    //@apiSTATE\r\n    //productsBrands represents an array of brands for a particular category .\r\n    //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \r\n    const [productsBrands,setProductsBrands] = useState([]);\r\n\r\n\r\n\r\n    //hard coded value for colors !!!might be changed in the future\r\n    let productsColors = [\"White\",\"Purple\",\"Yellow\",\"Green\",\"Brown\",\"Orange\",\"Gray\",\"Blue\",\"Silver\",\"Red\",\"Black\"];\r\n\r\n\r\n///states that change as a result of interaction with the user  -> @userChangeableSTATE\r\n\r\n    //@userChangeableSTATE\r\n    //productsOrder can be : standard , price ascending , price descending .\r\n    //@By default the value is set to be \"standard\";\r\n    const [productsOrder,setProductsOrder] = useState(\"standard\");\r\n\r\n            //hard coded value for colors !!!might be changed in the future\r\n            const productsOrderOptions = [{value: \"standard\", text: \"Standard\" } , {value: \"price_ascending\", text: \"Price ascending\" },{value: \"price_descending\", text: \"Price descending\" } ];\r\n            const changeProductsOrder = val => setProductsOrder(val);\r\n\r\n    //@userChangeableSTATE\r\n    //products number represents the number of the products that need to be displayed , the value can be 20, 40 or 80 .\r\n    // @By default the value is set to be 20\r\n    const[productsNumber,setProductsNumber] = useState(20);\r\n\r\n            //hard coded value for colors !!!might be changed in the future\r\n            const productsNumberOptions = [{value: 20 , text : \"20\"},{value: 40 , text : \"40\"},{value: 80 , text : \"80\"}]\r\n            const changeProductsNumber = val => setProductsNumber(val);\r\n    \r\n//function that toggles the value of the checkboxes on their respective states: //@userChangeableSTATE (productsPreferredBrand,productsPreferredColor,productsPreferedSizes)\r\n\r\n            function toggleCheckBoxPreferences(index,nativeArray,stateArray)\r\n            {   \r\n                let element = nativeArray[index];\r\n                let indexOfElement = stateArray.indexOf(element);\r\n                console.log(indexOfElement);\r\n                indexOfElement === -1 ?stateArray.push(element):stateArray.splice(indexOfElement,1);\r\n            }\r\n\r\n\r\n\r\n    //@userChangeableSTATE\r\n    //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\r\n    const[productsPreferredBrand,setProductsPreferredBrand] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred brand/s\r\n            const toggleBrandPreferences = (index) => toggleCheckBoxPreferences(index,productsBrands,productsPreferredBrand)\r\n\r\n\r\n    //@userChangeableSTATE\r\n    //productsPreferredColor represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\r\n    const[productsPreferredColor,setProductsPreferredColor] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred color/s\r\n            const toggleColorPreferences = (index) => toggleCheckBoxPreferences(index,productsColors,productsPreferredColor)\r\n\r\n\r\n    //@userChangeableSTATE\r\n    //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\r\n    //@By default the object has attributes that have values 0 each , in this situation we expect all the products \r\n    const[productsPriceRange,setProductsPriceRange] = useState({lowestPrice: productsPrices.lowestPrice , highestPrice: productsPrices.highestPrice});\r\n    \r\n    //@userChangeableSTATE   \r\n    //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\r\n    //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\r\n    const [productsPreferedSizes,setProductsPreferedSizes] = useState([]);\r\n\r\n                //Function that sets/unsets the preferred size/s\r\n                const toggleSizePreferences = (index) => toggleCheckBoxPreferences(index,productsSizes,productsPreferedSizes)\r\n\r\n        \r\n        \r\n                const[filterTableDisplay,setFilterTableDisplay] = useState(false);\r\n\r\n                //Function that closes all the options for filtering the products\r\n                function setAllFilterButtonsToFalse()\r\n                { setPbTableDisplay(false); setPsTableDisplay(false); setPcTableDisplay(false);}\r\n        \r\n        \r\n                const[pbTableDisplay,setPbTableDisplay] = useState(false);\r\n                const[pcTableDisplay,setPcTableDisplay] = useState(false);\r\n                const[psTableDisplay,setPsTableDisplay] = useState(false);\r\n\r\n                \r\n    //State that is an object that in itself contains the all the @userChangeableSTATE except : productsOrder.\r\n    const [masterState,setMasterState] = useState(masterStateGenerate())\r\n\r\n    //function that generates an object i.e MasterState object\r\n    function masterStateGenerate  () {\r\n        return new MasterState(productsPriceRange,productsNumber,productsPreferredBrand,productsPreferredColor,productsPreferedSizes);};\r\n\r\n    //function that updates the masterState\r\n    const masterStateUpdate = () => setMasterState(masterStateGenerate());\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n        const[getItems,setGetItems] = useState([]);\r\n        const [loading,setLoading] = useState(true);\r\n\r\n\r\n    function generateURL()\r\n    {\r\n        const url = `http://127.0.0.1:8080/get/product/category`\r\n        const query = `?categoryId=${id}&itemsNumber=${productsNumber}&lowestPrice=${productsPriceRange.lowestPrice}&highestPrice=${productsPriceRange.highestPrice}&colors=${productsPreferredColor}&brands=${productsPreferredBrand}&sizes=${productsPreferedSizes}`;\r\n        return url+query;\r\n    }\r\n\r\n    async function fetchProducts() {\r\n        const url = generateURL();\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setGetItems(data);\r\n        setLoading(false);\r\n      }\r\n\r\n    async function fetchPrice() {\r\n        const url  = `http://127.0.0.1:8080/get/category/prices?categoryId=${id}`;\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setProductsPrices(data);\r\n      }\r\n\r\n      async function fetchBrands() {\r\n        const url  = `http://127.0.0.1:8080/get/category/brands?categoryId=${id}`;\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setProductsBrands(data);\r\n      }\r\n\r\n      async function fetchSizes() {\r\n        const url  = `http://127.0.0.1:8080/get/category/sizes?categoryId=${id}`;\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setProductsSizes(data);\r\n      }\r\n  \r\n       useEffect(() => {\r\n            fetchPrice();\r\n            fetchBrands();\r\n            fetchSizes();\r\n          }, [])\r\n  \r\n          useEffect(() => {\r\n            fetchProducts();\r\n          }, [masterState])\r\n\r\n          useEffect(() => {\r\n             reorderProducts();\r\n          }, [productsOrder]);\r\n\r\n\r\n          function reorderProducts(){\r\n              \r\n            let arr = getItems;\r\n                if(productsOrder === \"price_ascending\")\r\n                {   window.alert(\"ban1\");\r\n                    for(var i = 0; i < arr.length; i++){\r\n                    \r\n                    // Last i elements are already in place  \r\n                    for(var j = 0; j < ( arr.length - i -1 ); j++){\r\n                        \r\n                      // Checking if the item at present iteration \r\n                      // is greater than the next iteration\r\n                      \r\n                      if(arr[j] > arr[j+1]){\r\n                          \r\n                        // If the condition is true then swap them\r\n                        var temp = arr[j]\r\n                        arr[j] = arr[j + 1]\r\n                        arr[j+1] = temp\r\n                      }\r\n                    }\r\n                  }}\r\n                else if(productsOrder === \"price_descending\")\r\n                {\r\n                    for(var i = 0; i < arr.length; i++){\r\n                    \r\n                    // Last i elements are already in place  \r\n                    for(var j = 0; j < ( arr.length - i -1 ); j++){\r\n                        \r\n                      // Checking if the item at present iteration \r\n                      // is greater than the next iteration\r\n                      \r\n                      if(arr[j] < arr[j+1]){\r\n                          \r\n                        // If the condition is true then swap them\r\n                        var temp = arr[j]\r\n                        arr[j] = arr[j + 1]\r\n                        arr[j+1] = temp\r\n                      }\r\n                    }\r\n                  }}\r\n                setGetItems(arr);\r\n          }\r\n\r\n    return (\r\n        <section id=\"productBody\">\r\n           \r\n                \r\n\r\n                <div id=\"firstElement\">\r\n                    <Select labelText=\"Order by\" onChangeFunction={(e)=> changeProductsOrder(e.target.value)} name=\"sort\" options={productsOrderOptions}></Select>\r\n                    <Select labelText=\"Display\" onChangeFunction={(e)=> changeProductsNumber(e.target.value)} name=\"display\" options={productsNumberOptions}></Select>\r\n                </div>\r\n\r\n                <button id='filterTable' className={filterTableDisplay ? \"clickedButton\" : \"\"} onClick={() => {setFilterTableDisplay(!filterTableDisplay); if(filterTableDisplay)setAllFilterButtonsToFalse();}}>Filter</button>\r\n\r\n                <div id=\"secondElement\" className={filterTableDisplay ? \"filterTable\" : \"filterTableNone\"}>\r\n\r\n                    <div id='filterOptions' >\r\n                        <button id=\"finishFilter\" onClick={masterStateUpdate}>done</button>\r\n                        <InputSlider productsPriceRange={productsPriceRange} ranges={productsPrices}  step={5} setPreferredLowestPrice={(number) => {setProductsPriceRange({lowestPrice : number ,highestPrice : productsPriceRange.highestPrice})}} setPreferredHighestPrice={(number) => {setProductsPriceRange({lowestPrice : productsPriceRange.lowestPrice ,highestPrice : 999 - number })}} ></InputSlider>\r\n                        <button className={ pbTableDisplay ? \"clickedButton\" : \"s\"} id=\"pbButton\" onClick={() => {setPbTableDisplay(!pbTableDisplay)} }>Preferred brands</button>\r\n                        <button className={ psTableDisplay ? \"clickedButton\" : \"s\"} id=\"psButton\" onClick={() => {setPsTableDisplay(!psTableDisplay)} }>Preferred sizes</button>\r\n                        <button className={ pcTableDisplay ? \"clickedButton\" : \"s\"} id=\"pcButton\" onClick={() => {setPcTableDisplay(!pcTableDisplay)} }>Preferred colors</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            <div id=\"thirdElement\">\r\n\r\n                    <CheckBox  tableDisplay={pbTableDisplay} productsX={productsBrands} nameCheckBox=\"preferredBrands\" onChangeCheckBox={(index) => toggleBrandPreferences(index)}></CheckBox>\r\n\r\n                    <CheckBox tableDisplay={psTableDisplay} productsX={productsSizes} nameCheckBox=\"preferredSizes\" onChangeCheckBox={(index) => toggleSizePreferences(index)}></CheckBox>\r\n\r\n                    <CheckBox tableDisplay={pcTableDisplay} productsX={productsColors} nameCheckBox=\"preferredColors\" onChangeCheckBox={(index) => toggleColorPreferences(index)}></CheckBox>\r\n\r\n            </div>\r\n\r\n            <div id=\"fourthElement\">\r\n\r\n                {loading && (<div className='loading'><p>loading</p></div>)}\r\n                {loading!==true && (<ItemList items = {getItems}></ItemList>)}\r\n            </div>\r\n\r\n        \r\n\r\n        </section>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}