{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\e-shop\\\\app\\\\src\\\\pages\\\\Products\\\\Products.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Products.css\";\nimport ItemList from '../../components/ItemList/ItemList';\nimport Select from '../../components/Select/Select';\nimport CheckBox from '../../components/CheckBox/CheckBox';\nimport InputSlider from '../../components/InputSlider/InputSlider';\nimport Pager from '../../components/Pager/Pager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Product() {\n  _s();\n\n  //id represents the category of the products to be displayed \n  const {\n    id\n  } = useParams(); //State that in itself contains the useStates :\n\n  const [masterState, setMasterState] = useState([productsPriceRange]); ///api consum\n  //productsSizes represents an array of sizes for a particular category .\n  //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \n\n  const [productsSizes, setProductsSizes] = useState([\"xs\", \"s\", \"m\", \"l\", \"xl\", \"xxl\"]); //productsPrices represents an object whith the lowest and highest price for a particular category of products .\n  //By default the bject is set to have two attributes lowestPrice and highestPrice , both having the value 0. During the first fetch of the api call we expect the value of the attributes to change. \n\n  const [productsPrices, setProductsPrices] = useState({\n    lowestPrice: 0,\n    highestPrice: 0\n  }); //productsBrands represents an array of brands for a particular category .\n  //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \n\n  const [productsBrands, setProductsBrands] = useState([\"Illyrian Bloodline\", \"KTM\", \"Zara\", \"Adidas\", \"Nike\", \"Code4Life\"]);\n  let productsColors = [\"White\", \"Purple\", \"Yellow\", \"Green\", \"Brown\", \"Orange\", \"Gray\", \"Blue\", \"Silver\", \"Red\", \"Black\"]; //productsOrder can be : standard , price ascending , price descending .\n  //@by default the value is set to be \"standard\";\n\n  const [productsOrder, setProductsOrder] = useState(\"standard\");\n  const productsOrderOptions = [{\n    value: \"standard\",\n    text: \"Standard\"\n  }, {\n    value: \"price_ascending\",\n    text: \"Price ascending\"\n  }, {\n    value: \"price_descending\",\n    text: \"Price descending\"\n  }];\n\n  const changeProductsOrder = val => setProductsOrder(val); //products number represents the number of the products that need to be displayed , the value can be 20, 40 or 80 .\n  // @By default the value is set to be 20\n\n\n  const [productsNumber, setProductsNumber] = useState(20);\n  const productsNumberOptions = [{\n    value: 20,\n    text: \"20\"\n  }, {\n    value: 40,\n    text: \"40\"\n  }, {\n    value: 80,\n    text: \"80\"\n  }];\n\n  const changeProductsNumber = val => setProductsNumber(val); //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\n\n\n  const [productsPreferredBrand, setProductsPreferredBrand] = useState([]); //Function that sets/unsets the preferred brand/s\n\n  function toggleBrandPreferences(index) {} //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\n\n\n  const [productsPreferredColor, setProductsPreferredColor] = useState([]); //Function that sets/unsets the preferred color/s\n\n  function toggleColorPreferences(index) {} //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\n  //@By default the object has attributes that have values 0 each , in this situation we expect all the products \n\n\n  const [productsPriceRange, setProductsPriceRange] = useState({\n    lowestPrice: 0,\n    highestPrice: 999\n  }); //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\n  //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\n\n  const [productsPreferedSizes, setProductsPreferedSizes] = useState([]); //Function that sets/unsets the preferred size/s\n\n  function toggleSizePreferences(index) {}\n\n  const [filterTableDisplay, setFilterTableDisplay] = useState(false); //Function that closes all the options for filtering the products\n\n  function setAllFilterButtonsToFalse() {\n    setPbTableDisplay(false);\n    setPsTableDisplay(false);\n    setPcTableDisplay(false);\n  }\n\n  const [pbTableDisplay, setPbTableDisplay] = useState(false);\n  const [pcTableDisplay, setPcTableDisplay] = useState(false);\n  const [psTableDisplay, setPsTableDisplay] = useState(false);\n  const [getItems, setGetItems] = useState([]);\n  const [loading, setLoading] = useState(true); //RestController parametrat:\n  //   categoryId,@RequestParam(required = false) Integer itemsNumber  \n  //, @RequestParam(required = false) Integer lowestPrice,\n  // @RequestParam(required = false) Integer lowestPrice,\n  // @RequestParam(required = false) List<String> colors ,\n  // @RequestParam(required = false) List<String> brands ,\n  // @RequestParam(required = false) List<String> sizes )\n\n  function generateURL() {\n    const url = `http://127.0.0.1:8080/get/product/category`;\n    const query = `?categoryId=${id}&itemsNumber=${productsNumber}&lowestPrice=${productsPriceRange.lowestPrice}&highestPrice=${productsPriceRange.highestPrice}&colors=${productsPreferredColor}&brands=${productsPreferredBrand}&sizes=${productsPreferedSizes}`;\n    return url + query;\n  }\n\n  async function fetchProducts() {\n    const url = generateURL();\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setGetItems(data);\n    setLoading(false);\n  }\n\n  async function fetchPrice() {\n    const url = `http://127.0.0.1:8080/get/category/prices?categoryId=${id}`;\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setProductsPrices(data);\n  }\n\n  useEffect(() => {\n    fetchProducts();\n    fetchPrice();\n  }, []);\n  useEffect(() => {\n    fetchProducts();\n  }, [productsPriceRange]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"productBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"firstElement\",\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        labelText: \"Order by\",\n        onChangeFunction: e => changeProductsOrder(e.target.value),\n        name: \"sort\",\n        options: productsOrderOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelText: \"Display\",\n        onChangeFunction: e => changeProductsNumber(e.target.value),\n        name: \"display\",\n        options: productsNumberOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"filterTable\",\n      className: filterTableDisplay ? \"clickedButton\" : \"\",\n      onClick: () => {\n        setFilterTableDisplay(!filterTableDisplay);\n        if (filterTableDisplay) setAllFilterButtonsToFalse();\n      },\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"secondElement\",\n      className: filterTableDisplay ? \"filterTable\" : \"filterTableNone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filterOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"finishFilter\",\n          children: \"done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(InputSlider, {\n          productsPriceRange: productsPriceRange,\n          ranges: productsPrices,\n          step: 5,\n          setPreferredLowestPrice: number => {\n            setProductsPriceRange({\n              lowestPrice: number,\n              highestPrice: productsPriceRange.highestPrice\n            });\n          },\n          setPreferredHighestPrice: number => {\n            setProductsPriceRange({\n              lowestPrice: productsPriceRange.lowestPrice,\n              highestPrice: 999 - number\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pbTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pbButton\",\n          onClick: () => {\n            setPbTableDisplay(!pbTableDisplay);\n          },\n          children: \"Preferred brands\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: psTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"psButton\",\n          onClick: () => {\n            setPsTableDisplay(!psTableDisplay);\n          },\n          children: \"Preferred sizes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: pcTableDisplay ? \"clickedButton\" : \"s\",\n          id: \"pcButton\",\n          onClick: () => {\n            setPcTableDisplay(!pcTableDisplay);\n          },\n          children: \"Preferred colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"thirdElement\",\n      children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: pbTableDisplay,\n        productsX: productsBrands,\n        nameCheckBox: \"preferredBrands\",\n        onChangeCheckBox: index => toggleBrandPreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: psTableDisplay,\n        productsX: productsSizes,\n        nameCheckBox: \"preferredSizes\",\n        onChangeCheckBox: index => toggleSizePreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n        tableDisplay: pcTableDisplay,\n        productsX: productsColors,\n        nameCheckBox: \"preferredColors\",\n        onChangeCheckBox: index => toggleColorPreferences(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fourthElement\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 30\n      }, this), loading !== true && /*#__PURE__*/_jsxDEV(ItemList, {\n        items: getItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fifthElement\",\n      children: /*#__PURE__*/_jsxDEV(Pager, {\n        pages: 2,\n        current: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Product, \"ZuNeAdhP5swKkBo04+wZPfEp3NA=\", false, function () {\n  return [useParams];\n});\n\n_c = Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Bootcamp/e-shop/app/src/pages/Products/Products.js"],"names":["React","useEffect","useState","useParams","ItemList","Select","CheckBox","InputSlider","Pager","Product","id","masterState","setMasterState","productsPriceRange","productsSizes","setProductsSizes","productsPrices","setProductsPrices","lowestPrice","highestPrice","productsBrands","setProductsBrands","productsColors","productsOrder","setProductsOrder","productsOrderOptions","value","text","changeProductsOrder","val","productsNumber","setProductsNumber","productsNumberOptions","changeProductsNumber","productsPreferredBrand","setProductsPreferredBrand","toggleBrandPreferences","index","productsPreferredColor","setProductsPreferredColor","toggleColorPreferences","setProductsPriceRange","productsPreferedSizes","setProductsPreferedSizes","toggleSizePreferences","filterTableDisplay","setFilterTableDisplay","setAllFilterButtonsToFalse","setPbTableDisplay","setPsTableDisplay","setPcTableDisplay","pbTableDisplay","pcTableDisplay","psTableDisplay","getItems","setGetItems","loading","setLoading","generateURL","url","query","fetchProducts","resp","fetch","data","json","fetchPrice","e","target","number"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect,useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport \"./Products.css\";\r\nimport ItemList from '../../components/ItemList/ItemList';\r\nimport Select from '../../components/Select/Select';\r\nimport CheckBox from '../../components/CheckBox/CheckBox';\r\nimport InputSlider from '../../components/InputSlider/InputSlider';\r\nimport Pager from '../../components/Pager/Pager';\r\nexport default function Product() {\r\n    \r\n    //id represents the category of the products to be displayed \r\n    const {id} = useParams();\r\n\r\n    //State that in itself contains the useStates :\r\n    const [masterState,setMasterState] = useState([productsPriceRange])\r\n\r\n\r\n///api consum\r\n\r\n\r\n    //productsSizes represents an array of sizes for a particular category .\r\n    //example if the category is shoes , the array should be like :  [\"43\",\"44\",\"44\",\"45\"] ...\r\n    //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the relevant sizes. \r\n    const [productsSizes,setProductsSizes] = useState([\"xs\",\"s\",\"m\",\"l\",\"xl\",\"xxl\"]);\r\n\r\n    //productsPrices represents an object whith the lowest and highest price for a particular category of products .\r\n    //By default the bject is set to have two attributes lowestPrice and highestPrice , both having the value 0. During the first fetch of the api call we expect the value of the attributes to change. \r\n    const [productsPrices,setProductsPrices] = useState({lowestPrice: 0 , highestPrice: 0});\r\n\r\n     //productsBrands represents an array of brands for a particular category .\r\n      //By default the array is set to be empty , during the first fetch of the api call we expect the array to be filled with the all the relevant brands. \r\n    const [productsBrands,setProductsBrands] = useState([\"Illyrian Bloodline\",\"KTM\",\"Zara\",\"Adidas\",\"Nike\",\"Code4Life\"]);\r\n\r\n\r\n    let productsColors = [\"White\",\"Purple\",\"Yellow\",\"Green\",\"Brown\",\"Orange\",\"Gray\",\"Blue\",\"Silver\",\"Red\",\"Black\"];\r\n\r\n\r\n    //productsOrder can be : standard , price ascending , price descending .\r\n    //@by default the value is set to be \"standard\";\r\n    const [productsOrder,setProductsOrder] = useState(\"standard\");\r\n\r\n        const productsOrderOptions = [{value: \"standard\", text: \"Standard\" } , {value: \"price_ascending\", text: \"Price ascending\" },{value: \"price_descending\", text: \"Price descending\" } ];\r\n            const changeProductsOrder = val => setProductsOrder(val);\r\n\r\n    //products number represents the number of the products that need to be displayed , the value can be 20, 40 or 80 .\r\n    // @By default the value is set to be 20\r\n    const[productsNumber,setProductsNumber] = useState(20);\r\n\r\n        const productsNumberOptions = [{value: 20 , text : \"20\"},{value: 40 , text : \"40\"},{value: 80 , text : \"80\"}]\r\n            const changeProductsNumber = val => setProductsNumber(val);\r\n    \r\n        //productsPreferredBrand represents an array of brands that are selected as preferred brands , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products from all the posssible brands.\r\n        const[productsPreferredBrand,setProductsPreferredBrand] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred brand/s\r\n            function toggleBrandPreferences(index){}\r\n\r\n\r\n        //productsPreferredBrand represents an array of colors that are selected as preferred colors , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible colors.\r\n        const[productsPreferredColor,setProductsPreferredColor] = useState([]);\r\n\r\n            //Function that sets/unsets the preferred color/s\r\n            function toggleColorPreferences(index){}\r\n\r\n        //productsPriceRange represents an object wich contains the attributes : \"lowestPrice\" (for the lowest price that the products can be) and  \"highestPrice\" (for the highest price that the products can be).\r\n        //@By default the object has attributes that have values 0 each , in this situation we expect all the products \r\n        const[productsPriceRange,setProductsPriceRange] = useState({lowestPrice: 0 , highestPrice: 999});\r\n    \r\n            \r\n        //productsPreferedSizes represents an array of sizes that are selected as preferred sized , the array can contain 0 or more elements .\r\n        //@By default the array contains 0 elements and in this situation, from the server side we will recive products with all the posssible sizes.\r\n        const [productsPreferedSizes,setProductsPreferedSizes] = useState([]);\r\n\r\n                //Function that sets/unsets the preferred size/s\r\n                function toggleSizePreferences(index){}\r\n\r\n        \r\n        \r\n                const[filterTableDisplay,setFilterTableDisplay] = useState(false);\r\n\r\n                //Function that closes all the options for filtering the products\r\n                function setAllFilterButtonsToFalse()\r\n                { setPbTableDisplay(false); setPsTableDisplay(false); setPcTableDisplay(false);}\r\n        \r\n        \r\n                const[pbTableDisplay,setPbTableDisplay] = useState(false);\r\n                const[pcTableDisplay,setPcTableDisplay] = useState(false);\r\n                const[psTableDisplay,setPsTableDisplay] = useState(false);\r\n\r\n        const[getItems,setGetItems] = useState([]);\r\n        const [loading,setLoading] = useState(true);\r\n\r\n        //RestController parametrat:\r\n//   categoryId,@RequestParam(required = false) Integer itemsNumber  \r\n//, @RequestParam(required = false) Integer lowestPrice,\r\n// @RequestParam(required = false) Integer lowestPrice,\r\n// @RequestParam(required = false) List<String> colors ,\r\n// @RequestParam(required = false) List<String> brands ,\r\n// @RequestParam(required = false) List<String> sizes )\r\n\r\n    function generateURL()\r\n    {\r\n        const url = `http://127.0.0.1:8080/get/product/category`\r\n        const query = `?categoryId=${id}&itemsNumber=${productsNumber}&lowestPrice=${productsPriceRange.lowestPrice}&highestPrice=${productsPriceRange.highestPrice}&colors=${productsPreferredColor}&brands=${productsPreferredBrand}&sizes=${productsPreferedSizes}`;\r\n        return url+query;\r\n    }\r\n\r\n    async function fetchProducts() {\r\n        const url = generateURL();\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setGetItems(data);\r\n        setLoading(false);\r\n      }\r\n\r\n    async function fetchPrice() {\r\n        const url  = `http://127.0.0.1:8080/get/category/prices?categoryId=${id}`;\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n        setProductsPrices(data);\r\n      }\r\n  \r\n       useEffect(() => {\r\n            fetchProducts();\r\n            fetchPrice();\r\n          }, [])\r\n  \r\n          useEffect(() => {\r\n            fetchProducts();\r\n          }, [productsPriceRange])\r\n\r\n\r\n    return (\r\n        <section id=\"productBody\">\r\n           \r\n                \r\n\r\n                <div id=\"firstElement\">\r\n                    <Select labelText=\"Order by\" onChangeFunction={(e)=> changeProductsOrder(e.target.value)} name=\"sort\" options={productsOrderOptions}></Select>\r\n                    <Select labelText=\"Display\" onChangeFunction={(e)=> changeProductsNumber(e.target.value)} name=\"display\" options={productsNumberOptions}></Select>\r\n                </div>\r\n\r\n                <button id='filterTable' className={filterTableDisplay ? \"clickedButton\" : \"\"} onClick={() => {setFilterTableDisplay(!filterTableDisplay); if(filterTableDisplay)setAllFilterButtonsToFalse();}}>Filter</button>\r\n\r\n                <div id=\"secondElement\" className={filterTableDisplay ? \"filterTable\" : \"filterTableNone\"}>\r\n\r\n                    <div id='filterOptions' >\r\n                        <button id=\"finishFilter\">done</button>\r\n                        <InputSlider productsPriceRange={productsPriceRange} ranges={productsPrices}  step={5} setPreferredLowestPrice={(number) => {setProductsPriceRange({lowestPrice : number ,highestPrice : productsPriceRange.highestPrice})}} setPreferredHighestPrice={(number) => {setProductsPriceRange({lowestPrice : productsPriceRange.lowestPrice ,highestPrice : 999 - number })}} ></InputSlider>\r\n                        <button className={ pbTableDisplay ? \"clickedButton\" : \"s\"} id=\"pbButton\" onClick={() => {setPbTableDisplay(!pbTableDisplay)} }>Preferred brands</button>\r\n                        <button className={ psTableDisplay ? \"clickedButton\" : \"s\"} id=\"psButton\" onClick={() => {setPsTableDisplay(!psTableDisplay)} }>Preferred sizes</button>\r\n                        <button className={ pcTableDisplay ? \"clickedButton\" : \"s\"} id=\"pcButton\" onClick={() => {setPcTableDisplay(!pcTableDisplay)} }>Preferred colors</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            <div id=\"thirdElement\">\r\n\r\n                    <CheckBox  tableDisplay={pbTableDisplay} productsX={productsBrands} nameCheckBox=\"preferredBrands\" onChangeCheckBox={(index) => toggleBrandPreferences(index)}></CheckBox>\r\n\r\n                    <CheckBox tableDisplay={psTableDisplay} productsX={productsSizes} nameCheckBox=\"preferredSizes\" onChangeCheckBox={(index) => toggleSizePreferences(index)}></CheckBox>\r\n\r\n                    <CheckBox tableDisplay={pcTableDisplay} productsX={productsColors} nameCheckBox=\"preferredColors\" onChangeCheckBox={(index) => toggleColorPreferences(index)}></CheckBox>\r\n\r\n            </div>\r\n\r\n            <div id=\"fourthElement\">\r\n\r\n                {loading && (<div className='loading'><p>loading</p></div>)}\r\n                {loading!==true && (<ItemList items = {getItems}></ItemList>)}\r\n            </div>\r\n\r\n             <div id=\"fifthElement\">\r\n                            {/* hard coded */}\r\n                            <Pager pages={2} current={2}></Pager>\r\n             </div>\r\n        \r\n\r\n        </section>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}